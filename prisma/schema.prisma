generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model owner {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  email      String   @unique
  password   String
  avatar     String?
  about      String
  occupation String
  birthDate  DateTime
  cvLinkPT   String?
  cvLinkEN   String?
  secretWord String?
}

model project {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  techs        String[]
  screenshots  String[]
  deployment   String
  backend      String?
  frontend     String?
  previewImage String
  activate     Boolean   @default(true)
  lastUpdate   DateTime?
  ownerId      String
  createdAt    DateTime  @default(now())
}

model skill {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  image     String
  stack     String
  type      String
  subSkils  String[]
  ownerId   String
  createdAt DateTime @default(now())
}

model formation {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  institution      String
  image            String
  workload         Int
  initialDate      DateTime
  endDate          DateTime
  description      String
  type             String
  certificationUrl String?
  concluded        Boolean  @default(false)
  ownerId          String
  createdAt        DateTime @default(now())
}

model service {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  sId             String       @unique
  title           String
  description     String
  technologies    String[]
  category        String
  complexity      String
  deliveryTime    String
  priceMin        Int
  priceMax        Int
  currency        String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  ownerId         String
  connectionsFrom connection[] @relation("ServiceFrom")
  connectionsTo   connection[] @relation("ServiceTo")
}

model connection {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  fromId      String  @db.ObjectId
  toId        String  @db.ObjectId
  type        String
  serviceFrom service @relation("ServiceFrom", fields: [fromId], references: [id])
  serviceTo   service @relation("ServiceTo", fields: [toId], references: [id])
}

model visitor {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  sessionId   String     @unique
  ipAddress   String
  userAgent   String
  country     String?
  city        String?
  device      String
  browser     String?
  os          String?
  referrer    String?
  landingPage String
  createdAt   DateTime   @default(now())
  ownerId     String
  pageViews   pageView[]
}

model pageView {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  visitorId String   @db.ObjectId
  page      String
  timeSpent Int?
  timestamp DateTime @default(now())
  ownerId   String
  visitor   visitor  @relation(fields: [visitorId], references: [id], onDelete: Cascade)
}

model analyticsDaily {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  date           DateTime @unique
  totalVisitors  Int      @default(0)
  uniqueVisitors Int      @default(0)
  pageViews      Int      @default(0)
  desktop        Int      @default(0)
  mobile         Int      @default(0)
  tablet         Int      @default(0)
  topPages       Json     @default("[]")
  topCountries   Json     @default("[]")
  topBrowsers    Json     @default("[]")
  bounceRate     Float    @default(0)
  avgTimeSpent   Float    @default(0)
  ownerId        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
